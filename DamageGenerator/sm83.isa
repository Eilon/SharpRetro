(defm u1  (v) (cast v u1))
(defm u8  (v) (cast v u8))
(defm u16 (v) (cast v u16))

(defm i8  (v) (cast v i8))
(defm i16 (v) (cast v i16))

(defm reg-b () (reg 0b000))
(defm reg-c () (reg 0b001))
(defm reg-d () (reg 0b010))
(defm reg-e () (reg 0b011))
(defm reg-h () (reg 0b100))
(defm reg-l () (reg 0b101))
(defm reg-a () (reg 0b111))

(defm reg-name (r)
    (match r
        0b000 "B"
        0b001 "C"
        0b010 "D"
        0b011 "E"
        0b100 "H"
        0b101 "L"
        0b111 "A"
        (unimplemented)))

(defm reg16-name (r)
    (match r
        0b00 "BC"
        0b01 "DE"
        0b10 "HL"
        "SP"))

(defm reg16-or-af-name (r)
    (if (== r 0b11)
        "AF"
        (reg16-name r)))

(def LD-rd-rs
    "01 ddd sss"
    "ld $(reg-name rd), $(reg-name rs)"
    (names (rd d) (rs s))
    (cycles 1)
    (requires (!= rs 0b110))
    (= (reg rd) (reg rs)))

(def LD-rd-imm8
    "00 ddd 110 iiiiiiii"
    "ld $(reg-name rd), $imm"
    (names (rd d) (imm i))
    (cycles 2)
    (requires (!= rd 0b110))
    (= (reg rd) imm))

(def LD-rd-HL
    "01 ddd 110"
    "ld $(reg-name rd), (HL)"
    (names (rd d))
    (cycles 2)
    (requires (!= rd 0b110))
    (= (reg rd) (load (reg-hl) u8)))

(def LD-HL-rs
    "01 110 sss"
    "ld (HL), $(reg-name rs)"
    (names (rs s))
    (cycles 2)
    (requires (!= rs 0b110))
    (store (reg-hl) (reg rs)))

(def LD-HL-imm8
    "00 110 110 iiiiiiii"
    "ld (HL), $imm"
    (names (imm i))
    (cycles 3)
    (block)
    (store (reg-hl) imm))

(def LD-A-BC
    "00001010"
    "ld A, (BC)"
    (names)
    (cycles 2)
    (block)
    (= (reg-a) (load (reg-bc) u8)))

(def LD-A-DE
    "00011010"
    "ld A, (DE)"
    (names)
    (cycles 2)
    (block)
    (= (reg-a) (load (reg-de) u8)))

(def LD-BC-A
    "00000010"
    "ld (BC), A"
    (names)
    (cycles 2)
    (block)
    (store (reg-bc) (reg-a)))

(def LD-DE-A
    "00010010"
    "ld (DE), A"
    (names)
    (cycles 2)
    (block)
    (store (reg-de) (reg-a)))

(def LD-A-imm16
    "11111010 LLLLLLLL MMMMMMMM"
    "ld A, ($addr)"
    (names (lsb L) (msb M))
    (cycles 4)
    (let addr (| (<< (u16 msb) 8) lsb))
    (= (reg-a) (load addr u8)))

(def LD-imm16-A
    "11101010 LLLLLLLL MMMMMMMM"
    "ld ($addr), A"
    (names (lsb L) (msb M))
    (cycles 4)
    (let addr (| (<< (u16 msb) 8) lsb))
    (store addr (reg-a)))

(def LDH-A-C
    "11110010"
    "ldh A, (C)"
    (names)
    (cycles 2)
    (block)
    (= (reg-a) (load (| (u16 0xFF00) (reg-c)) u8)))

(def LDH-C-A
    "11100010"
    "ldh (C), A"
    (names)
    (cycles 2)
    (block)(block)
    (store (| (u16 0xFF00) (reg-c)) (reg-a)))

(def LDH-A-imm8
    "11110000 iiiiiiii"
    "ldh A, ($addr)"
    (names (imm i))
    (cycles 3)
    (let addr (| (u16 0xFF00) imm))
    (= (reg-a) (load addr u8)))

(def LDH-imm8-A
    "11100000 iiiiiiii"
    "ldh ($addr), A"
    (names (imm i))
    (cycles 3)
    (let addr (| (u16 0xFF00) imm))
    (store addr (reg-a)))

(def LD-A-HL-
    "00111010"
    "ld A, (HL-)"
    (names)
    (cycles 2)
    (block)
    (let hl (reg-hl)
        (= (reg-a) (load hl u8))
        (= (reg-hl) (- hl 1))))

(def LD-HL--A
    "00110010"
    "ld (HL-), A"
    (names)
    (cycles 2)
    (block)
    (let hl (reg-hl)
        (store hl (reg-a))
        (= (reg-hl) (- hl 1))))

(def LD-A-HL+
    "00101010"
    "ld A, (HL+)"
    (names)
    (cycles 2)
    (block)
    (let hl (reg-hl)
        (= (reg-a) (load hl u8))
        (= (reg-hl) (+ hl 1))))

(def LD-HL+-A
    "00100010"
    "ld (HL+), A"
    (names)
    (cycles 2)
    (block)
    (let hl (reg-hl)
        (store hl (reg-a))
        (= (reg-hl) (+ hl 1))))

(def LD-rr-imm16
    "00rr0001 LLLLLLLL MMMMMMMM"
    "ld $(reg16-name r), $imm"
    (names (r r) (lsb L) (msb M))
    (cycles 3)
    (let imm (| (<< (u16 msb) 8) lsb))
    (match r
        0b00 (= (reg-bc) imm)
        0b01 (= (reg-de) imm)
        0b10 (= (reg-hl) imm)
             (= (reg-sp) imm)))

(def LD-imm16-SP
    "00001000 LLLLLLLL MMMMMMMM"
    "ld ($addr), SP"
    (names (r r) (lsb L) (msb M))
    (cycles 5)
    (let addr (| (<< (u16 msb) 8) lsb))
    (store addr (reg-sp)))

(def LD-SP-HL
    "11111001"
    "ld SP, HL"
    (names)
    (cycles 2)
    (block)
    (= (reg-sp) (reg-hl)))

(def PUSH-rr
    "11rr0101"
    "push $(reg16-or-af-name r)"
    (names (r r))
    (cycles 4)
    (block)
    (let sp (- (reg-sp) 2)
        (= (reg-sp) sp)
        (store sp (match r
            0b00 (reg-bc)
            0b01 (reg-de)
            0b10 (reg-hl)
                 (reg-af)))))

(def POP-rr
    "11rr0001"
    "pop $(reg16-or-af-name r)"
    (names (r r))
    (cycles 4)
    (block)
    (mlet (sp (reg-sp) v (load sp u16))
        (match r
            0b00 (= (reg-bc) v)
            0b01 (= (reg-de) v)
            0b10 (= (reg-hl) v)
                 (= (reg-af) v))
        (= (reg-sp) (+ sp 2))))

(def JP-nn
    "11000011 LLLLLLLL MMMMMMMM"
    "jp $addr"
    (names (lsb L) (msb M))
    (cycles 4)
    (let addr (| (<< (u16 msb) 8) lsb))
    (branch addr))

(def JP-HL
    "11101001"
    "jp HL"
    (names)
    (cycles 1)
    (block)
    (branch (reg-hl)))

(defm cc-name (cc)
    (match cc
        0b00 "NZ"
        0b01 "Z"
        0b10 "NC"
             "C"))

(defm cc-taken (cc)
    (match (>> cc 1)
        0 (== (>> (reg-flags) 7) (& cc 1))
          (== (& (>> (reg-flags) 6) 1) (& cc 1))))

(def JP-cc-imm16
    "110cc010 LLLLLLLL MMMMMMMM"
    "jp $(cc-name cc), $addr"
    (names (cc c) (lsb L) (msb M))
    (cycles (if (cc-taken cc) 4 3))
    (let addr (| (<< (u16 msb) 8) lsb))
    (if (cc-taken cc)
        (branch addr)
        (branch-default)))

(def JR-simm8
    "00011000 eeeeeeee"
    "jr $offset"
    (names (e e))
    (cycles 3)
    (let offset (i8 e))
    (branch (+ (pc) offset)))
